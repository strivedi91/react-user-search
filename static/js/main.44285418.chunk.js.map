{"version":3,"sources":["component/card/card.component.js","component/card-list/card-list.component.js","component/search-box/searchbox.component.js","App.js","serviceWorker.js","index.js"],"names":["Card","user","className","src","id","alt","name","company","email","phone","CardList","props","users","map","key","SearchBox","handleChange","placeholder","type","onChange","App","onSearchChange","e","setState","searchField","target","value","state","fetch","then","response","json","this","filteredUsers","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4PAoBeA,MAlBf,YAAyB,IAATC,EAAQ,EAARA,KACd,OACE,yBAAKC,UAAU,WACb,yBACEA,UAAU,6EACVC,IAAG,+BAA0BF,EAAKG,GAA/B,aACHC,IAAI,QAEN,yBAAKH,UAAU,4BACb,wBAAIA,UAAU,WAAWD,EAAKK,MAC9B,yBAAKJ,UAAU,mBAAmBD,EAAKM,QAAQD,MAC/C,yBAAKJ,UAAU,iBAAiBD,EAAKO,OACrC,yBAAKN,UAAU,iBAAiBD,EAAKQ,UCD9BC,MAVf,SAAkBC,GAChB,OACE,yBAAKT,UAAU,0BACZS,EAAMC,MAAMC,KAAI,SAACZ,GAAD,OACf,kBAAC,EAAD,CAAMa,IAAKb,EAAKG,GAAIH,KAAMA,SCLnB,SAASc,EAAT,GAA8D,IAAzCC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,YAAaf,EAAa,EAAbA,UAC7D,OACE,2BACEgB,KAAK,SACLD,YAAaA,EACbE,SAAUH,EACVd,UAAWA,I,ICmCFkB,E,kDArCb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXf,MAAO,GACPY,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAU,EAAKR,SAAS,CAAEX,MAAOmB,S,+BAOjC,IAAD,EACwBC,KAAKL,MAA5Bf,EADD,EACCA,MAAOY,EADR,EACQA,YACXS,EAAgBrB,EAAMsB,QAAO,SAACjC,GAAD,OAC/BA,EAAKK,KAAK6B,cAAcC,SAASZ,EAAYW,kBAG/C,OACE,yBAAKjC,UAAU,qBACb,kBAACa,EAAD,CACEC,aAAcgB,KAAKX,eACnBJ,YAAY,cACZf,UAAU,oLAEZ,kBAAC,EAAD,CAAUA,UAAU,YAAYU,MAAOqB,S,GAhC7BI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.44285418.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Card({ user }) {\r\n  return (\r\n    <div className=\"md:flex\">\r\n      <img\r\n        className=\"h-16 w-16 md:h-24 md:w-24 rounded-full mx-auto md:mx-0 md:mr-6 text-center\"\r\n        src={`https://robohash.org/${user.id}?set=set2`}\r\n        alt=\"img\"\r\n      />\r\n      <div className=\"text-center md:text-left\">\r\n        <h2 className=\"text-lg\">{user.name}</h2>\r\n        <div className=\"text-purple-500\">{user.company.name}</div>\r\n        <div className=\"text-gray-600\">{user.email}</div>\r\n        <div className=\"text-gray-600\">{user.phone}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../card/card.component\";\r\n\r\nfunction CardList(props) {\r\n  return (\r\n    <div className=\"grid grid-cols-4 gap-6\">\r\n      {props.users.map((user) => (\r\n        <Card key={user.id} user={user}></Card>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nexport default function SearchBox({ handleChange, placeholder, className }) {\r\n  return (\r\n    <input\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n      className={className}\r\n    ></input>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./app.css\";\nimport CardList from \"./component/card-list/card-list.component\";\nimport SearchBox from \"./component/search-box/searchbox.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((json) => this.setState({ users: json }));\n  }\n\n  onSearchChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { users, searchField } = this.state;\n    let filteredUsers = users.filter((user) =>\n      user.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"container mx-auto\">\n        <SearchBox\n          handleChange={this.onSearchChange}\n          placeholder=\"Search User\"\n          className=\"mt-10 mb-10 bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\"\n        ></SearchBox>\n        <CardList className=\"container\" users={filteredUsers}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}